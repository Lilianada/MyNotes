"use client";

import type React from "react";

import { useState, useEffect, useRef } from "react";
import { Menu } from "./menu";
import NoteEditor from "./note-editor";
import TitleModal from "./title-modal";
import { saveNoteToFile, createEmptyNoteFile } from "@/app/actions";
import { useNotes } from "@/contexts/note-context";

export type Note = {
  id: number;
  content: string;
  createdAt: Date;
  noteTitle: string;
  filePath?: string;
};

export function Notes() {
  const { notes, selectedNoteId, setNotes, addNote, updateNote, updateNoteTitle, deleteNote, selectNote } = useNotes();
  
  const activeNote = selectedNoteId ? notes.find(note => note.id === selectedNoteId) || null : null;
  
  const [nextId, setNextId] = useState<number>(() => {
    if (notes.length > 0) {
      return Math.max(...notes.map((note) => note.id)) + 1;
    }
    return 1;
  });

  const [workTitle, setWorkTitle] = useState<string>("Work");
  const [menuOpen, setMenuOpen] = useState(false);
  const [showTitleInput, setShowTitleInput] = useState(false);
  const [newNoteTitle, setNewNoteTitle] = useState("");
  const editorRef = useRef<HTMLTextAreaElement>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  const titleInputRef = useRef<HTMLInputElement | null>(null);

  // Save notes to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
  }, [notes]);

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setMenuOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Add this useEffect to your Notes component
  useEffect(() => {
    // Save note when activeNote changes (debounced to prevent excessive saves)
    const saveTimeout = setTimeout(() => {
      if (activeNote && activeNote.content) {
        saveNote();
      }
    }, 500); // Wait 500ms after changes before saving

    return () => clearTimeout(saveTimeout);
  }, [activeNote?.content]);

  // Focus title input when it appears
  useEffect(() => {
    if (showTitleInput && titleInputRef.current) {
      titleInputRef.current.focus();
    }
  }, [showTitleInput]);

  // Generate a unique note title
  const generateUniqueNoteTitle = (baseTitle: string): string => {
    let title = baseTitle;
    let counter = 1;

    // Check if the title already exists
    while (notes.some((note) => note.noteTitle === title)) {
      title = `${baseTitle} ${counter}`;
      counter++;
    }

    return title;
  };

  const initiateNewNote = () => {
    setNewNoteTitle("");
    setShowTitleInput(true);
  };

  const createNewNote = async (customTitle?: string) => {
    // Use the custom title if provided, otherwise use default
    const titleBase =
      customTitle && customTitle.trim() !== "" ? customTitle : `Note ${nextId}`;

    // Create a unique title for the new note
    const uniqueTitle = generateUniqueNoteTitle(titleBase);

    // Create an empty file immediately
    const result = await createEmptyNoteFile(uniqueTitle);

    const newNote: Note = {
      id: nextId,
      content: "",
      createdAt: new Date(),
      noteTitle: uniqueTitle,
      filePath: result.success ? result.filePath : undefined,
    };

    // Add note to context
    addNote(newNote);
    
    // Select the note in the context
    selectNote(newNote.id);
    
    setNextId(nextId + 1);
    setShowTitleInput(false);

    // Focus the editor
    setTimeout(() => {
      if (editorRef.current) {
        editorRef.current.focus();
      }
    }, 0);
  };

  const handleTitleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    createNewNote(newNoteTitle);
  };

  const cancelTitleInput = () => {
    setShowTitleInput(false);
  };

  const saveNote = async () => {
    if (!activeNote) return;

    // Save to localStorage
    const updatedNotes = notes.map((note) =>
      note.id === activeNote.id ? activeNote : note
    );
    setNotes(updatedNotes);

    // Save to file system
    try {
      const result = await saveNoteToFile(
        activeNote.content,
        activeNote.id,
        activeNote.noteTitle
      );

      if (result.success && result.filePath) {
        // Update the note with the file path
        const noteWithPath = { ...activeNote, filePath: result.filePath };
        // Update notes using the context
        setNotes(
          updatedNotes.map((note) =>
            note.id === activeNote.id ? noteWithPath : note
          )
        );
      }
    } catch (error) {
      console.error("Error saving note to file:", error);
    }
  };

  const handleUpdateNote = (content: string) => {
    if (!activeNote) return;

    // Use the context's updateNote function
    updateNote(activeNote.id, content);
  };

  const handleUpdateNoteTitle = (id: number, newTitle: string) => {
    // Ensure the title is unique
    const uniqueTitle = generateUniqueNoteTitle(newTitle);

    // If this is the active note, update it
    if (activeNote && activeNote.id === id) {
      // Use the context's updateNoteTitle function
      updateNoteTitle(id, uniqueTitle);
      
      // Save the file with the new title
      saveNoteToFile(activeNote.content, activeNote.id, uniqueTitle);
    }

    return uniqueTitle;
  };

  const handleWorkTitleChange = (e: React.FocusEvent<HTMLHeadingElement>) => {
    setWorkTitle(e.currentTarget.textContent || "Draft");
  };

  const selectExistingNote = (note: Note) => {
    selectNote(note.id);
    setMenuOpen(false);
  };

  return (
    <div className="w-full mx-auto h-full flex flex-col">
      <div className="flex justify-end items-center">
        <div className="flex items-center" ref={menuRef}>
          <button
            onClick={initiateNewNote}
            className="p-1 text-gray-500 hover:text-gray-700 mr-2"
            aria-label="Add new note"
          >
            +
          </button>
          <Menu isOpen={menuOpen} setIsOpen={setMenuOpen} />
        </div>
      </div>

      {/* Title Input Modal */}
      {showTitleInput && (
        <TitleModal
          handleTitleSubmit={handleTitleSubmit}
          titleInputRef={titleInputRef}
          newNoteTitle={newNoteTitle}
          setNewNoteTitle={setNewNoteTitle}
          cancelTitleInput={cancelTitleInput}
        />
      )}

      <div className="border border-gray-200 rounded-lg px-4 pt-4 bg-white flex-1 flex flex-col overflow-hidden">
        <div className="flex-1 overflow-hidden">
          {activeNote ? (
            <NoteEditor
              note={activeNote}
              onChange={(content) => handleUpdateNote(content)}
              onSave={saveNote}
              onUpdateTitle={(newTitle) =>
                handleUpdateNoteTitle(activeNote.id, newTitle)
              }
              ref={editorRef}
            />
          ) : (
            <div className="h-full flex items-center justify-center">
              <div className="text-gray-400 text-center">
                <p className="text-lg mb-4">Start typing...</p>
                <p className="text-sm">
                  Click the + button to create a new note
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
